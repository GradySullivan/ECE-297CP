
toggleProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000826  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d8  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  0000113e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000146  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000196e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 82 00 	call	0x104	; 0x104 <main>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <blink>:
    }
}

int blink (int pin_num)
{
	PORTB |= (1<<pin_num); // turn pin on --> turn on LED
  80:	45 b1       	in	r20, 0x05	; 5
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	b9 01       	movw	r22, r18
  88:	02 c0       	rjmp	.+4      	; 0x8e <blink+0xe>
  8a:	66 0f       	add	r22, r22
  8c:	77 1f       	adc	r23, r23
  8e:	8a 95       	dec	r24
  90:	e2 f7       	brpl	.-8      	; 0x8a <blink+0xa>
  92:	cb 01       	movw	r24, r22
  94:	46 2b       	or	r20, r22
  96:	45 b9       	out	0x05, r20	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	7f ef       	ldi	r23, 0xFF	; 255
  9a:	21 ee       	ldi	r18, 0xE1	; 225
  9c:	34 e0       	ldi	r19, 0x04	; 4
  9e:	71 50       	subi	r23, 0x01	; 1
  a0:	20 40       	sbci	r18, 0x00	; 0
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <blink+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <blink+0x28>
  a8:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~(1<<pin_num); // turn pin off --> turn off LED
  aa:	95 b1       	in	r25, 0x05	; 5
  ac:	80 95       	com	r24
  ae:	89 23       	and	r24, r25
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	61 ee       	ldi	r22, 0xE1	; 225
  b6:	74 e0       	ldi	r23, 0x04	; 4
  b8:	41 50       	subi	r20, 0x01	; 1
  ba:	60 40       	sbci	r22, 0x00	; 0
  bc:	70 40       	sbci	r23, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <blink+0x38>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <blink+0x42>
  c2:	00 00       	nop
	_delay_ms(100); // total of 200 ms delay, so this will loop 5 times a second, or 5 Hz
}
  c4:	08 95       	ret

000000c6 <blinkBoth>:

void blinkBoth (void)
{
	PORTB |= (1<<0); // turn PB0 on --> turn on green LED
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<1); // turn PB1 on --> turn on red LED
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	81 ee       	ldi	r24, 0xE1	; 225
  d6:	94 e0       	ldi	r25, 0x04	; 4
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <blinkBoth+0x12>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <blinkBoth+0x1c>
  e2:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~(1<<0); // turn PB0 off --> turn off green LED
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<1); // turn PB1 off --> turn off red LED
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	81 ee       	ldi	r24, 0xE1	; 225
  f4:	94 e0       	ldi	r25, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <blinkBoth+0x30>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <blinkBoth+0x3a>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <main>:
int blink(int pin_num);
void blinkBoth(void);

int main(void)
{
    DDRB = (1<<0)|(1<<1); // pins PB0 and PB1 are output pins
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	84 b9       	out	0x04, r24	; 4
	
    while (1) 
    {
		if (PIND&(1<<0)) // if button is pressed...
 108:	48 9b       	sbis	0x09, 0	; 9
 10a:	05 c0       	rjmp	.+10     	; 0x116 <main+0x12>
			blink(0); // blink the green LED
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 40 00 	call	0x80	; 0x80 <blink>
 114:	03 c0       	rjmp	.+6      	; 0x11c <main+0x18>
		else
			PORTB &= ~(1<<0); // turn green LED off 
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	85 b9       	out	0x05, r24	; 5
			
		if (PIND&(1<<1)) // if button is pressed...
 11c:	49 9b       	sbis	0x09, 1	; 9
 11e:	05 c0       	rjmp	.+10     	; 0x12a <main+0x26>
			blink(1); // blink the red LED
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 40 00 	call	0x80	; 0x80 <blink>
 128:	03 c0       	rjmp	.+6      	; 0x130 <main+0x2c>
		else
			PORTB &= ~(1<<1); // turn red LED off
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	85 b9       	out	0x05, r24	; 5

		if (PIND&(1<<2)) // if button is pressed...
 130:	4a 9b       	sbis	0x09, 2	; 9
 132:	03 c0       	rjmp	.+6      	; 0x13a <main+0x36>
		{
			blinkBoth();
 134:	0e 94 63 00 	call	0xc6	; 0xc6 <blinkBoth>
 138:	e7 cf       	rjmp	.-50     	; 0x108 <main+0x4>
		}
		else
		{
			PORTB &= ~(1<<1); // turn both LEDs off	
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<0);	
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8e 7f       	andi	r24, 0xFE	; 254
 144:	85 b9       	out	0x05, r24	; 5
 146:	e0 cf       	rjmp	.-64     	; 0x108 <main+0x4>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
