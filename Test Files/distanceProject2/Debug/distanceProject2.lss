
distanceProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000084c  000008e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000084c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  000008ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0d  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b3  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042a  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000403  00000000  00000000  00002549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000294c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 01 	call	0x332	; 0x332 <main>
  9e:	0c 94 24 04 	jmp	0x848	; 0x848 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
	}
}

void init()
{
	DDRD = 0xFF; // set 7-segment LEDs to output
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	DDRC = (1<<DIG1)|(1<<DIG2)|(1<<DIG3)|(1<<DIG4); // set digit as outputs
  aa:	8e e1       	ldi	r24, 0x1E	; 30
  ac:	87 b9       	out	0x07, r24	; 7
	DDRB = (1<<LED)|(1<<TRIGGER); // set LED and TRIGGER as outputs
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A = 0; //initialize timer 1 on normal mode
  b2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS12)|(1<<CS10); // set 1024 prescalar to timer 1's clock
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1<<TOIE1); // enable timer 1 overflow interrupt
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei();
  c2:	78 94       	sei
  c4:	08 95       	ret

000000c6 <getDistance>:
{
	unsigned int timeToRisingEdge, timeToFallingEdge, pulseWidth, distance;
	
	while(1)
	{
		PORTB |= 1<< TRIGGER;
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	85 e3       	ldi	r24, 0x35	; 53
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <getDistance+0x8>
  d2:	00 00       	nop
		_delay_us(10.);
		PORTB &= ~(1 << TRIGGER);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	85 b9       	out	0x05, r24	; 5
		
		TCCR1B |= (1<<ICES1); // set timer to capture on rising edge of ICP1
  da:	e1 e8       	ldi	r30, 0x81	; 129
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
		while ((TIFR1 & (1 << ICF1)) == 0); // wait for rising edge to be captured
  e4:	b5 9b       	sbis	0x16, 5	; 22
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <getDistance+0x1e>
		timeToRisingEdge = ICR1; // set variable to captured timestamp in register
  e8:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  ec:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
		TIFR1 = (1 << ICF1); // clear capture flag
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	86 bb       	out	0x16, r24	; 22
		
		TCCR1B &= ~(1<<ICES1); // set timer to capture on falling edge of ICP1 pin
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8f 7b       	andi	r24, 0xBF	; 191
  fc:	80 83       	st	Z, r24
		while ((TIFR1 & (1 << ICF1)) == 0)
  fe:	04 c0       	rjmp	.+8      	; 0x108 <getDistance+0x42>
		timeToFallingEdge = ICR1;
 100:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 104:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
		while ((TIFR1 & (1 << ICF1)) == 0); // wait for rising edge to be captured
		timeToRisingEdge = ICR1; // set variable to captured timestamp in register
		TIFR1 = (1 << ICF1); // clear capture flag
		
		TCCR1B &= ~(1<<ICES1); // set timer to capture on falling edge of ICP1 pin
		while ((TIFR1 & (1 << ICF1)) == 0)
 108:	b5 9b       	sbis	0x16, 5	; 22
 10a:	fa cf       	rjmp	.-12     	; 0x100 <getDistance+0x3a>
		timeToFallingEdge = ICR1;
		TIFR1 = (1 << ICF1);
 10c:	80 e2       	ldi	r24, 0x20	; 32
 10e:	86 bb       	out	0x16, r24	; 22
		
		if (timeToFallingEdge > timeToRisingEdge) break;
 110:	26 17       	cp	r18, r22
 112:	37 07       	cpc	r19, r23
 114:	c0 f6       	brcc	.-80     	; 0xc6 <getDistance>
	}
	
	pulseWidth = timeToFallingEdge - timeToRisingEdge;
 116:	62 1b       	sub	r22, r18
 118:	73 0b       	sbc	r23, r19
	distance = pulseWidth * 1.098;
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 1a 03 	call	0x634	; 0x634 <__floatunsisf>
 122:	24 e4       	ldi	r18, 0x44	; 68
 124:	3b e8       	ldi	r19, 0x8B	; 139
 126:	4c e8       	ldi	r20, 0x8C	; 140
 128:	5f e3       	ldi	r21, 0x3F	; 63
 12a:	0e 94 a8 03 	call	0x750	; 0x750 <__mulsf3>
 12e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fixunssfsi>
	
	return distance;
}
 132:	cb 01       	movw	r24, r22
 134:	08 95       	ret

00000136 <getDigits>:

void getDigits(unsigned int distance, unsigned int* distanceDigits)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	eb 01       	movw	r28, r22
	distanceDigits[0] = (distance/1000)%10; // thousands place
 13e:	9c 01       	movw	r18, r24
 140:	36 95       	lsr	r19
 142:	27 95       	ror	r18
 144:	36 95       	lsr	r19
 146:	27 95       	ror	r18
 148:	36 95       	lsr	r19
 14a:	27 95       	ror	r18
 14c:	a5 ec       	ldi	r26, 0xC5	; 197
 14e:	b0 e2       	ldi	r27, 0x20	; 32
 150:	0e 94 15 04 	call	0x82a	; 0x82a <__umulhisi3>
 154:	ac 01       	movw	r20, r24
 156:	52 95       	swap	r21
 158:	42 95       	swap	r20
 15a:	4f 70       	andi	r20, 0x0F	; 15
 15c:	45 27       	eor	r20, r21
 15e:	5f 70       	andi	r21, 0x0F	; 15
 160:	45 27       	eor	r20, r21
 162:	9a 01       	movw	r18, r20
 164:	ad ec       	ldi	r26, 0xCD	; 205
 166:	bc ec       	ldi	r27, 0xCC	; 204
 168:	0e 94 15 04 	call	0x82a	; 0x82a <__umulhisi3>
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	9c 01       	movw	r18, r24
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	82 0f       	add	r24, r18
 18c:	93 1f       	adc	r25, r19
 18e:	9a 01       	movw	r18, r20
 190:	28 1b       	sub	r18, r24
 192:	39 0b       	sbc	r19, r25
 194:	39 83       	std	Y+1, r19	; 0x01
 196:	28 83       	st	Y, r18
	distanceDigits[1] = (distance/100)%10;  // hundreds place
 198:	9f 01       	movw	r18, r30
 19a:	36 95       	lsr	r19
 19c:	27 95       	ror	r18
 19e:	36 95       	lsr	r19
 1a0:	27 95       	ror	r18
 1a2:	ab e7       	ldi	r26, 0x7B	; 123
 1a4:	b4 e1       	ldi	r27, 0x14	; 20
 1a6:	0e 94 15 04 	call	0x82a	; 0x82a <__umulhisi3>
 1aa:	ac 01       	movw	r20, r24
 1ac:	56 95       	lsr	r21
 1ae:	47 95       	ror	r20
 1b0:	9a 01       	movw	r18, r20
 1b2:	ad ec       	ldi	r26, 0xCD	; 205
 1b4:	bc ec       	ldi	r27, 0xCC	; 204
 1b6:	0e 94 15 04 	call	0x82a	; 0x82a <__umulhisi3>
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	96 95       	lsr	r25
 1c4:	87 95       	ror	r24
 1c6:	9c 01       	movw	r18, r24
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	82 0f       	add	r24, r18
 1da:	93 1f       	adc	r25, r19
 1dc:	9a 01       	movw	r18, r20
 1de:	28 1b       	sub	r18, r24
 1e0:	39 0b       	sbc	r19, r25
 1e2:	3b 83       	std	Y+3, r19	; 0x03
 1e4:	2a 83       	std	Y+2, r18	; 0x02
	distanceDigits[2] = (distance/10)%10;   // tens place
 1e6:	9f 01       	movw	r18, r30
 1e8:	0e 94 15 04 	call	0x82a	; 0x82a <__umulhisi3>
 1ec:	ac 01       	movw	r20, r24
 1ee:	56 95       	lsr	r21
 1f0:	47 95       	ror	r20
 1f2:	56 95       	lsr	r21
 1f4:	47 95       	ror	r20
 1f6:	56 95       	lsr	r21
 1f8:	47 95       	ror	r20
 1fa:	9a 01       	movw	r18, r20
 1fc:	0e 94 15 04 	call	0x82a	; 0x82a <__umulhisi3>
 200:	96 95       	lsr	r25
 202:	87 95       	ror	r24
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	96 95       	lsr	r25
 20a:	87 95       	ror	r24
 20c:	9c 01       	movw	r18, r24
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	82 0f       	add	r24, r18
 220:	93 1f       	adc	r25, r19
 222:	9a 01       	movw	r18, r20
 224:	28 1b       	sub	r18, r24
 226:	39 0b       	sbc	r19, r25
 228:	3d 83       	std	Y+5, r19	; 0x05
 22a:	2c 83       	std	Y+4, r18	; 0x04
	distanceDigits[3] = (distance%10);      // ones place
 22c:	ca 01       	movw	r24, r20
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	48 0f       	add	r20, r24
 240:	59 1f       	adc	r21, r25
 242:	e4 1b       	sub	r30, r20
 244:	f5 0b       	sbc	r31, r21
 246:	ff 83       	std	Y+7, r31	; 0x07
 248:	ee 83       	std	Y+6, r30	; 0x06
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <displayDigit>:
		displayDigit(distanceDigits[3], DIG4);
	}
}

void displayDigit(unsigned char distanceDigits, unsigned char place)
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	2a 97       	sbiw	r28, 0x0a	; 10
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	f8 94       	cli
 25e:	de bf       	out	0x3e, r29	; 62
 260:	0f be       	out	0x3f, r0	; 63
 262:	cd bf       	out	0x3d, r28	; 61
	unsigned char persistence = 3;
	unsigned char ledDigits[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,
 264:	9a e0       	ldi	r25, 0x0A	; 10
 266:	e0 e0       	ldi	r30, 0x00	; 0
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	de 01       	movw	r26, r28
 26c:	11 96       	adiw	r26, 0x01	; 1
 26e:	01 90       	ld	r0, Z+
 270:	0d 92       	st	X+, r0
 272:	9a 95       	dec	r25
 274:	e1 f7       	brne	.-8      	; 0x26e <displayDigit+0x1e>
	0x07, 0x7F, 0x67};
	
	PORTD = ledDigits[distanceDigits];
 276:	e1 e0       	ldi	r30, 0x01	; 1
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ec 0f       	add	r30, r28
 27c:	fd 1f       	adc	r31, r29
 27e:	e8 0f       	add	r30, r24
 280:	f1 1d       	adc	r31, r1
 282:	80 81       	ld	r24, Z
 284:	8b b9       	out	0x0b, r24	; 11
	PORTC = ~(1<<place);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <displayDigit+0x40>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <displayDigit+0x3c>
 294:	80 95       	com	r24
 296:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	8f ed       	ldi	r24, 0xDF	; 223
 29a:	9e e2       	ldi	r25, 0x2E	; 46
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <displayDigit+0x4c>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <displayDigit+0x52>
 2a2:	00 00       	nop
	_delay_ms(persistence);
	PORTC |= 0xFF;
 2a4:	88 b1       	in	r24, 0x08	; 8
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	88 b9       	out	0x08, r24	; 8
}
 2aa:	2a 96       	adiw	r28, 0x0a	; 10
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <displayDistance>:
	distanceDigits[2] = (distance/10)%10;   // tens place
	distanceDigits[3] = (distance%10);      // ones place
}

void displayDistance(unsigned int* distanceDigits)
{	
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
	for(int i=0;i<50;i++)
 2c6:	00 e0       	ldi	r16, 0x00	; 0
 2c8:	10 e0       	ldi	r17, 0x00	; 0
 2ca:	12 c0       	rjmp	.+36     	; 0x2f0 <displayDistance+0x34>
	{
		displayDigit(distanceDigits[0], DIG1);
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	88 81       	ld	r24, Y
 2d0:	0e 94 28 01 	call	0x250	; 0x250 <displayDigit>
		displayDigit(distanceDigits[1], DIG2);
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	8a 81       	ldd	r24, Y+2	; 0x02
 2d8:	0e 94 28 01 	call	0x250	; 0x250 <displayDigit>
		displayDigit(distanceDigits[2], DIG3);
 2dc:	63 e0       	ldi	r22, 0x03	; 3
 2de:	8c 81       	ldd	r24, Y+4	; 0x04
 2e0:	0e 94 28 01 	call	0x250	; 0x250 <displayDigit>
		displayDigit(distanceDigits[3], DIG4);
 2e4:	64 e0       	ldi	r22, 0x04	; 4
 2e6:	8e 81       	ldd	r24, Y+6	; 0x06
 2e8:	0e 94 28 01 	call	0x250	; 0x250 <displayDigit>
	distanceDigits[3] = (distance%10);      // ones place
}

void displayDistance(unsigned int* distanceDigits)
{	
	for(int i=0;i<50;i++)
 2ec:	0f 5f       	subi	r16, 0xFF	; 255
 2ee:	1f 4f       	sbci	r17, 0xFF	; 255
 2f0:	02 33       	cpi	r16, 0x32	; 50
 2f2:	11 05       	cpc	r17, r1
 2f4:	5c f3       	brlt	.-42     	; 0x2cc <displayDistance+0x10>
		displayDigit(distanceDigits[0], DIG1);
		displayDigit(distanceDigits[1], DIG2);
		displayDigit(distanceDigits[2], DIG3);
		displayDigit(distanceDigits[3], DIG4);
	}
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <blinker>:
	_delay_ms(persistence);
	PORTC |= 0xFF;
}

void blinker(double frequency)
{
 300:	9b 01       	movw	r18, r22
 302:	ac 01       	movw	r20, r24
	preLoad = 65536-7812. / frequency;
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e2       	ldi	r23, 0x20	; 32
 308:	84 ef       	ldi	r24, 0xF4	; 244
 30a:	95 e4       	ldi	r25, 0x45	; 69
 30c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__divsf3>
 310:	9b 01       	movw	r18, r22
 312:	ac 01       	movw	r20, r24
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	97 e4       	ldi	r25, 0x47	; 71
 31c:	0e 94 0c 02 	call	0x418	; 0x418 <__subsf3>
 320:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 324:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 328:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 32c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 330:	08 95       	ret

00000332 <main>:
void displayDistance(unsigned int* distanceDigits);
void displayDigit(unsigned char distanceDigits, unsigned char place);
void blinker(double);

int main(void)
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	28 97       	sbiw	r28, 0x08	; 8
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
	unsigned int distanceDigits[4];
	unsigned int distance;
	init();
 346:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	double frequency = 1;
	
	while (1)
	{
		distance = getDistance();
 34a:	0e 94 63 00 	call	0xc6	; 0xc6 <getDistance>
 34e:	8c 01       	movw	r16, r24
		
		if (distance > 200)
 350:	89 3c       	cpi	r24, 0xC9	; 201
 352:	91 05       	cpc	r25, r1
 354:	b8 f4       	brcc	.+46     	; 0x384 <main+0x52>
			frequency = 0.5;
		else if (distance < 10)
 356:	8a 30       	cpi	r24, 0x0A	; 10
 358:	91 05       	cpc	r25, r1
 35a:	c8 f0       	brcs	.+50     	; 0x38e <main+0x5c>
			frequency = 25;
		else
			frequency = 21 - 1./10 * distance;
 35c:	bc 01       	movw	r22, r24
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 1a 03 	call	0x634	; 0x634 <__floatunsisf>
 366:	2d ec       	ldi	r18, 0xCD	; 205
 368:	3c ec       	ldi	r19, 0xCC	; 204
 36a:	4c ec       	ldi	r20, 0xCC	; 204
 36c:	5d e3       	ldi	r21, 0x3D	; 61
 36e:	0e 94 a8 03 	call	0x750	; 0x750 <__mulsf3>
 372:	9b 01       	movw	r18, r22
 374:	ac 01       	movw	r20, r24
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	88 ea       	ldi	r24, 0xA8	; 168
 37c:	91 e4       	ldi	r25, 0x41	; 65
 37e:	0e 94 0c 02 	call	0x418	; 0x418 <__subsf3>
 382:	09 c0       	rjmp	.+18     	; 0x396 <main+0x64>
	while (1)
	{
		distance = getDistance();
		
		if (distance > 200)
			frequency = 0.5;
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	9f e3       	ldi	r25, 0x3F	; 63
 38c:	04 c0       	rjmp	.+8      	; 0x396 <main+0x64>
		else if (distance < 10)
			frequency = 25;
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	88 ec       	ldi	r24, 0xC8	; 200
 394:	91 e4       	ldi	r25, 0x41	; 65
		else
			frequency = 21 - 1./10 * distance;
		
		blinker(frequency);
 396:	0e 94 80 01 	call	0x300	; 0x300 <blinker>
		getDigits(distance, distanceDigits);
 39a:	be 01       	movw	r22, r28
 39c:	6f 5f       	subi	r22, 0xFF	; 255
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	c8 01       	movw	r24, r16
 3a2:	0e 94 9b 00 	call	0x136	; 0x136 <getDigits>
		displayDistance(distanceDigits);
 3a6:	ce 01       	movw	r24, r28
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <displayDistance>
	}
 3ae:	cd cf       	rjmp	.-102    	; 0x34a <main+0x18>

000003b0 <__vector_13>:
{
	preLoad = 65536-7812. / frequency;
}

ISR(TIMER1_OVF_vect)
{
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
	TCNT1 = preLoad;
 3d2:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 3d6:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
 3da:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
 3de:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
 3e2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fixunssfsi>
 3e6:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 3ea:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	PORTB ^= (1<<LED);
 3ee:	95 b1       	in	r25, 0x05	; 5
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	89 27       	eor	r24, r25
 3f4:	85 b9       	out	0x05, r24	; 5
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <__subsf3>:
 418:	50 58       	subi	r21, 0x80	; 128

0000041a <__addsf3>:
 41a:	bb 27       	eor	r27, r27
 41c:	aa 27       	eor	r26, r26
 41e:	0e 94 24 02 	call	0x448	; 0x448 <__addsf3x>
 422:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_round>
 426:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscA>
 42a:	38 f0       	brcs	.+14     	; 0x43a <__addsf3+0x20>
 42c:	0e 94 67 03 	call	0x6ce	; 0x6ce <__fp_pscB>
 430:	20 f0       	brcs	.+8      	; 0x43a <__addsf3+0x20>
 432:	39 f4       	brne	.+14     	; 0x442 <__addsf3+0x28>
 434:	9f 3f       	cpi	r25, 0xFF	; 255
 436:	19 f4       	brne	.+6      	; 0x43e <__addsf3+0x24>
 438:	26 f4       	brtc	.+8      	; 0x442 <__addsf3+0x28>
 43a:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_nan>
 43e:	0e f4       	brtc	.+2      	; 0x442 <__addsf3+0x28>
 440:	e0 95       	com	r30
 442:	e7 fb       	bst	r30, 7
 444:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_inf>

00000448 <__addsf3x>:
 448:	e9 2f       	mov	r30, r25
 44a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__fp_split3>
 44e:	58 f3       	brcs	.-42     	; 0x426 <__addsf3+0xc>
 450:	ba 17       	cp	r27, r26
 452:	62 07       	cpc	r22, r18
 454:	73 07       	cpc	r23, r19
 456:	84 07       	cpc	r24, r20
 458:	95 07       	cpc	r25, r21
 45a:	20 f0       	brcs	.+8      	; 0x464 <__addsf3x+0x1c>
 45c:	79 f4       	brne	.+30     	; 0x47c <__addsf3x+0x34>
 45e:	a6 f5       	brtc	.+104    	; 0x4c8 <__addsf3x+0x80>
 460:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_zero>
 464:	0e f4       	brtc	.+2      	; 0x468 <__addsf3x+0x20>
 466:	e0 95       	com	r30
 468:	0b 2e       	mov	r0, r27
 46a:	ba 2f       	mov	r27, r26
 46c:	a0 2d       	mov	r26, r0
 46e:	0b 01       	movw	r0, r22
 470:	b9 01       	movw	r22, r18
 472:	90 01       	movw	r18, r0
 474:	0c 01       	movw	r0, r24
 476:	ca 01       	movw	r24, r20
 478:	a0 01       	movw	r20, r0
 47a:	11 24       	eor	r1, r1
 47c:	ff 27       	eor	r31, r31
 47e:	59 1b       	sub	r21, r25
 480:	99 f0       	breq	.+38     	; 0x4a8 <__addsf3x+0x60>
 482:	59 3f       	cpi	r21, 0xF9	; 249
 484:	50 f4       	brcc	.+20     	; 0x49a <__addsf3x+0x52>
 486:	50 3e       	cpi	r21, 0xE0	; 224
 488:	68 f1       	brcs	.+90     	; 0x4e4 <__addsf3x+0x9c>
 48a:	1a 16       	cp	r1, r26
 48c:	f0 40       	sbci	r31, 0x00	; 0
 48e:	a2 2f       	mov	r26, r18
 490:	23 2f       	mov	r18, r19
 492:	34 2f       	mov	r19, r20
 494:	44 27       	eor	r20, r20
 496:	58 5f       	subi	r21, 0xF8	; 248
 498:	f3 cf       	rjmp	.-26     	; 0x480 <__addsf3x+0x38>
 49a:	46 95       	lsr	r20
 49c:	37 95       	ror	r19
 49e:	27 95       	ror	r18
 4a0:	a7 95       	ror	r26
 4a2:	f0 40       	sbci	r31, 0x00	; 0
 4a4:	53 95       	inc	r21
 4a6:	c9 f7       	brne	.-14     	; 0x49a <__addsf3x+0x52>
 4a8:	7e f4       	brtc	.+30     	; 0x4c8 <__addsf3x+0x80>
 4aa:	1f 16       	cp	r1, r31
 4ac:	ba 0b       	sbc	r27, r26
 4ae:	62 0b       	sbc	r22, r18
 4b0:	73 0b       	sbc	r23, r19
 4b2:	84 0b       	sbc	r24, r20
 4b4:	ba f0       	brmi	.+46     	; 0x4e4 <__addsf3x+0x9c>
 4b6:	91 50       	subi	r25, 0x01	; 1
 4b8:	a1 f0       	breq	.+40     	; 0x4e2 <__addsf3x+0x9a>
 4ba:	ff 0f       	add	r31, r31
 4bc:	bb 1f       	adc	r27, r27
 4be:	66 1f       	adc	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	88 1f       	adc	r24, r24
 4c4:	c2 f7       	brpl	.-16     	; 0x4b6 <__addsf3x+0x6e>
 4c6:	0e c0       	rjmp	.+28     	; 0x4e4 <__addsf3x+0x9c>
 4c8:	ba 0f       	add	r27, r26
 4ca:	62 1f       	adc	r22, r18
 4cc:	73 1f       	adc	r23, r19
 4ce:	84 1f       	adc	r24, r20
 4d0:	48 f4       	brcc	.+18     	; 0x4e4 <__addsf3x+0x9c>
 4d2:	87 95       	ror	r24
 4d4:	77 95       	ror	r23
 4d6:	67 95       	ror	r22
 4d8:	b7 95       	ror	r27
 4da:	f7 95       	ror	r31
 4dc:	9e 3f       	cpi	r25, 0xFE	; 254
 4de:	08 f0       	brcs	.+2      	; 0x4e2 <__addsf3x+0x9a>
 4e0:	b0 cf       	rjmp	.-160    	; 0x442 <__addsf3+0x28>
 4e2:	93 95       	inc	r25
 4e4:	88 0f       	add	r24, r24
 4e6:	08 f0       	brcs	.+2      	; 0x4ea <__addsf3x+0xa2>
 4e8:	99 27       	eor	r25, r25
 4ea:	ee 0f       	add	r30, r30
 4ec:	97 95       	ror	r25
 4ee:	87 95       	ror	r24
 4f0:	08 95       	ret

000004f2 <__divsf3>:
 4f2:	0e 94 8d 02 	call	0x51a	; 0x51a <__divsf3x>
 4f6:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_round>
 4fa:	0e 94 67 03 	call	0x6ce	; 0x6ce <__fp_pscB>
 4fe:	58 f0       	brcs	.+22     	; 0x516 <__divsf3+0x24>
 500:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscA>
 504:	40 f0       	brcs	.+16     	; 0x516 <__divsf3+0x24>
 506:	29 f4       	brne	.+10     	; 0x512 <__divsf3+0x20>
 508:	5f 3f       	cpi	r21, 0xFF	; 255
 50a:	29 f0       	breq	.+10     	; 0x516 <__divsf3+0x24>
 50c:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_inf>
 510:	51 11       	cpse	r21, r1
 512:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>
 516:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_nan>

0000051a <__divsf3x>:
 51a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__fp_split3>
 51e:	68 f3       	brcs	.-38     	; 0x4fa <__divsf3+0x8>

00000520 <__divsf3_pse>:
 520:	99 23       	and	r25, r25
 522:	b1 f3       	breq	.-20     	; 0x510 <__divsf3+0x1e>
 524:	55 23       	and	r21, r21
 526:	91 f3       	breq	.-28     	; 0x50c <__divsf3+0x1a>
 528:	95 1b       	sub	r25, r21
 52a:	55 0b       	sbc	r21, r21
 52c:	bb 27       	eor	r27, r27
 52e:	aa 27       	eor	r26, r26
 530:	62 17       	cp	r22, r18
 532:	73 07       	cpc	r23, r19
 534:	84 07       	cpc	r24, r20
 536:	38 f0       	brcs	.+14     	; 0x546 <__divsf3_pse+0x26>
 538:	9f 5f       	subi	r25, 0xFF	; 255
 53a:	5f 4f       	sbci	r21, 0xFF	; 255
 53c:	22 0f       	add	r18, r18
 53e:	33 1f       	adc	r19, r19
 540:	44 1f       	adc	r20, r20
 542:	aa 1f       	adc	r26, r26
 544:	a9 f3       	breq	.-22     	; 0x530 <__divsf3_pse+0x10>
 546:	35 d0       	rcall	.+106    	; 0x5b2 <__divsf3_pse+0x92>
 548:	0e 2e       	mov	r0, r30
 54a:	3a f0       	brmi	.+14     	; 0x55a <__divsf3_pse+0x3a>
 54c:	e0 e8       	ldi	r30, 0x80	; 128
 54e:	32 d0       	rcall	.+100    	; 0x5b4 <__divsf3_pse+0x94>
 550:	91 50       	subi	r25, 0x01	; 1
 552:	50 40       	sbci	r21, 0x00	; 0
 554:	e6 95       	lsr	r30
 556:	00 1c       	adc	r0, r0
 558:	ca f7       	brpl	.-14     	; 0x54c <__divsf3_pse+0x2c>
 55a:	2b d0       	rcall	.+86     	; 0x5b2 <__divsf3_pse+0x92>
 55c:	fe 2f       	mov	r31, r30
 55e:	29 d0       	rcall	.+82     	; 0x5b2 <__divsf3_pse+0x92>
 560:	66 0f       	add	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	bb 1f       	adc	r27, r27
 568:	26 17       	cp	r18, r22
 56a:	37 07       	cpc	r19, r23
 56c:	48 07       	cpc	r20, r24
 56e:	ab 07       	cpc	r26, r27
 570:	b0 e8       	ldi	r27, 0x80	; 128
 572:	09 f0       	breq	.+2      	; 0x576 <__divsf3_pse+0x56>
 574:	bb 0b       	sbc	r27, r27
 576:	80 2d       	mov	r24, r0
 578:	bf 01       	movw	r22, r30
 57a:	ff 27       	eor	r31, r31
 57c:	93 58       	subi	r25, 0x83	; 131
 57e:	5f 4f       	sbci	r21, 0xFF	; 255
 580:	3a f0       	brmi	.+14     	; 0x590 <__divsf3_pse+0x70>
 582:	9e 3f       	cpi	r25, 0xFE	; 254
 584:	51 05       	cpc	r21, r1
 586:	78 f0       	brcs	.+30     	; 0x5a6 <__divsf3_pse+0x86>
 588:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_inf>
 58c:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>
 590:	5f 3f       	cpi	r21, 0xFF	; 255
 592:	e4 f3       	brlt	.-8      	; 0x58c <__divsf3_pse+0x6c>
 594:	98 3e       	cpi	r25, 0xE8	; 232
 596:	d4 f3       	brlt	.-12     	; 0x58c <__divsf3_pse+0x6c>
 598:	86 95       	lsr	r24
 59a:	77 95       	ror	r23
 59c:	67 95       	ror	r22
 59e:	b7 95       	ror	r27
 5a0:	f7 95       	ror	r31
 5a2:	9f 5f       	subi	r25, 0xFF	; 255
 5a4:	c9 f7       	brne	.-14     	; 0x598 <__divsf3_pse+0x78>
 5a6:	88 0f       	add	r24, r24
 5a8:	91 1d       	adc	r25, r1
 5aa:	96 95       	lsr	r25
 5ac:	87 95       	ror	r24
 5ae:	97 f9       	bld	r25, 7
 5b0:	08 95       	ret
 5b2:	e1 e0       	ldi	r30, 0x01	; 1
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	bb 1f       	adc	r27, r27
 5bc:	62 17       	cp	r22, r18
 5be:	73 07       	cpc	r23, r19
 5c0:	84 07       	cpc	r24, r20
 5c2:	ba 07       	cpc	r27, r26
 5c4:	20 f0       	brcs	.+8      	; 0x5ce <__divsf3_pse+0xae>
 5c6:	62 1b       	sub	r22, r18
 5c8:	73 0b       	sbc	r23, r19
 5ca:	84 0b       	sbc	r24, r20
 5cc:	ba 0b       	sbc	r27, r26
 5ce:	ee 1f       	adc	r30, r30
 5d0:	88 f7       	brcc	.-30     	; 0x5b4 <__divsf3_pse+0x94>
 5d2:	e0 95       	com	r30
 5d4:	08 95       	ret

000005d6 <__fixunssfsi>:
 5d6:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_splitA>
 5da:	88 f0       	brcs	.+34     	; 0x5fe <__fixunssfsi+0x28>
 5dc:	9f 57       	subi	r25, 0x7F	; 127
 5de:	98 f0       	brcs	.+38     	; 0x606 <__fixunssfsi+0x30>
 5e0:	b9 2f       	mov	r27, r25
 5e2:	99 27       	eor	r25, r25
 5e4:	b7 51       	subi	r27, 0x17	; 23
 5e6:	b0 f0       	brcs	.+44     	; 0x614 <__fixunssfsi+0x3e>
 5e8:	e1 f0       	breq	.+56     	; 0x622 <__fixunssfsi+0x4c>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	1a f0       	brmi	.+6      	; 0x5fa <__fixunssfsi+0x24>
 5f4:	ba 95       	dec	r27
 5f6:	c9 f7       	brne	.-14     	; 0x5ea <__fixunssfsi+0x14>
 5f8:	14 c0       	rjmp	.+40     	; 0x622 <__fixunssfsi+0x4c>
 5fa:	b1 30       	cpi	r27, 0x01	; 1
 5fc:	91 f0       	breq	.+36     	; 0x622 <__fixunssfsi+0x4c>
 5fe:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_zero>
 602:	b1 e0       	ldi	r27, 0x01	; 1
 604:	08 95       	ret
 606:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_zero>
 60a:	67 2f       	mov	r22, r23
 60c:	78 2f       	mov	r23, r24
 60e:	88 27       	eor	r24, r24
 610:	b8 5f       	subi	r27, 0xF8	; 248
 612:	39 f0       	breq	.+14     	; 0x622 <__fixunssfsi+0x4c>
 614:	b9 3f       	cpi	r27, 0xF9	; 249
 616:	cc f3       	brlt	.-14     	; 0x60a <__fixunssfsi+0x34>
 618:	86 95       	lsr	r24
 61a:	77 95       	ror	r23
 61c:	67 95       	ror	r22
 61e:	b3 95       	inc	r27
 620:	d9 f7       	brne	.-10     	; 0x618 <__fixunssfsi+0x42>
 622:	3e f4       	brtc	.+14     	; 0x632 <__fixunssfsi+0x5c>
 624:	90 95       	com	r25
 626:	80 95       	com	r24
 628:	70 95       	com	r23
 62a:	61 95       	neg	r22
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	8f 4f       	sbci	r24, 0xFF	; 255
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	08 95       	ret

00000634 <__floatunsisf>:
 634:	e8 94       	clt
 636:	09 c0       	rjmp	.+18     	; 0x64a <__floatsisf+0x12>

00000638 <__floatsisf>:
 638:	97 fb       	bst	r25, 7
 63a:	3e f4       	brtc	.+14     	; 0x64a <__floatsisf+0x12>
 63c:	90 95       	com	r25
 63e:	80 95       	com	r24
 640:	70 95       	com	r23
 642:	61 95       	neg	r22
 644:	7f 4f       	sbci	r23, 0xFF	; 255
 646:	8f 4f       	sbci	r24, 0xFF	; 255
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	99 23       	and	r25, r25
 64c:	a9 f0       	breq	.+42     	; 0x678 <__floatsisf+0x40>
 64e:	f9 2f       	mov	r31, r25
 650:	96 e9       	ldi	r25, 0x96	; 150
 652:	bb 27       	eor	r27, r27
 654:	93 95       	inc	r25
 656:	f6 95       	lsr	r31
 658:	87 95       	ror	r24
 65a:	77 95       	ror	r23
 65c:	67 95       	ror	r22
 65e:	b7 95       	ror	r27
 660:	f1 11       	cpse	r31, r1
 662:	f8 cf       	rjmp	.-16     	; 0x654 <__floatsisf+0x1c>
 664:	fa f4       	brpl	.+62     	; 0x6a4 <__floatsisf+0x6c>
 666:	bb 0f       	add	r27, r27
 668:	11 f4       	brne	.+4      	; 0x66e <__floatsisf+0x36>
 66a:	60 ff       	sbrs	r22, 0
 66c:	1b c0       	rjmp	.+54     	; 0x6a4 <__floatsisf+0x6c>
 66e:	6f 5f       	subi	r22, 0xFF	; 255
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	16 c0       	rjmp	.+44     	; 0x6a4 <__floatsisf+0x6c>
 678:	88 23       	and	r24, r24
 67a:	11 f0       	breq	.+4      	; 0x680 <__floatsisf+0x48>
 67c:	96 e9       	ldi	r25, 0x96	; 150
 67e:	11 c0       	rjmp	.+34     	; 0x6a2 <__floatsisf+0x6a>
 680:	77 23       	and	r23, r23
 682:	21 f0       	breq	.+8      	; 0x68c <__floatsisf+0x54>
 684:	9e e8       	ldi	r25, 0x8E	; 142
 686:	87 2f       	mov	r24, r23
 688:	76 2f       	mov	r23, r22
 68a:	05 c0       	rjmp	.+10     	; 0x696 <__floatsisf+0x5e>
 68c:	66 23       	and	r22, r22
 68e:	71 f0       	breq	.+28     	; 0x6ac <__floatsisf+0x74>
 690:	96 e8       	ldi	r25, 0x86	; 134
 692:	86 2f       	mov	r24, r22
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	2a f0       	brmi	.+10     	; 0x6a4 <__floatsisf+0x6c>
 69a:	9a 95       	dec	r25
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	da f7       	brpl	.-10     	; 0x69a <__floatsisf+0x62>
 6a4:	88 0f       	add	r24, r24
 6a6:	96 95       	lsr	r25
 6a8:	87 95       	ror	r24
 6aa:	97 f9       	bld	r25, 7
 6ac:	08 95       	ret

000006ae <__fp_inf>:
 6ae:	97 f9       	bld	r25, 7
 6b0:	9f 67       	ori	r25, 0x7F	; 127
 6b2:	80 e8       	ldi	r24, 0x80	; 128
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	08 95       	ret

000006ba <__fp_nan>:
 6ba:	9f ef       	ldi	r25, 0xFF	; 255
 6bc:	80 ec       	ldi	r24, 0xC0	; 192
 6be:	08 95       	ret

000006c0 <__fp_pscA>:
 6c0:	00 24       	eor	r0, r0
 6c2:	0a 94       	dec	r0
 6c4:	16 16       	cp	r1, r22
 6c6:	17 06       	cpc	r1, r23
 6c8:	18 06       	cpc	r1, r24
 6ca:	09 06       	cpc	r0, r25
 6cc:	08 95       	ret

000006ce <__fp_pscB>:
 6ce:	00 24       	eor	r0, r0
 6d0:	0a 94       	dec	r0
 6d2:	12 16       	cp	r1, r18
 6d4:	13 06       	cpc	r1, r19
 6d6:	14 06       	cpc	r1, r20
 6d8:	05 06       	cpc	r0, r21
 6da:	08 95       	ret

000006dc <__fp_round>:
 6dc:	09 2e       	mov	r0, r25
 6de:	03 94       	inc	r0
 6e0:	00 0c       	add	r0, r0
 6e2:	11 f4       	brne	.+4      	; 0x6e8 <__fp_round+0xc>
 6e4:	88 23       	and	r24, r24
 6e6:	52 f0       	brmi	.+20     	; 0x6fc <__fp_round+0x20>
 6e8:	bb 0f       	add	r27, r27
 6ea:	40 f4       	brcc	.+16     	; 0x6fc <__fp_round+0x20>
 6ec:	bf 2b       	or	r27, r31
 6ee:	11 f4       	brne	.+4      	; 0x6f4 <__fp_round+0x18>
 6f0:	60 ff       	sbrs	r22, 0
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__fp_round+0x20>
 6f4:	6f 5f       	subi	r22, 0xFF	; 255
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8f 4f       	sbci	r24, 0xFF	; 255
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	08 95       	ret

000006fe <__fp_split3>:
 6fe:	57 fd       	sbrc	r21, 7
 700:	90 58       	subi	r25, 0x80	; 128
 702:	44 0f       	add	r20, r20
 704:	55 1f       	adc	r21, r21
 706:	59 f0       	breq	.+22     	; 0x71e <__fp_splitA+0x10>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	71 f0       	breq	.+28     	; 0x728 <__fp_splitA+0x1a>
 70c:	47 95       	ror	r20

0000070e <__fp_splitA>:
 70e:	88 0f       	add	r24, r24
 710:	97 fb       	bst	r25, 7
 712:	99 1f       	adc	r25, r25
 714:	61 f0       	breq	.+24     	; 0x72e <__fp_splitA+0x20>
 716:	9f 3f       	cpi	r25, 0xFF	; 255
 718:	79 f0       	breq	.+30     	; 0x738 <__fp_splitA+0x2a>
 71a:	87 95       	ror	r24
 71c:	08 95       	ret
 71e:	12 16       	cp	r1, r18
 720:	13 06       	cpc	r1, r19
 722:	14 06       	cpc	r1, r20
 724:	55 1f       	adc	r21, r21
 726:	f2 cf       	rjmp	.-28     	; 0x70c <__fp_split3+0xe>
 728:	46 95       	lsr	r20
 72a:	f1 df       	rcall	.-30     	; 0x70e <__fp_splitA>
 72c:	08 c0       	rjmp	.+16     	; 0x73e <__fp_splitA+0x30>
 72e:	16 16       	cp	r1, r22
 730:	17 06       	cpc	r1, r23
 732:	18 06       	cpc	r1, r24
 734:	99 1f       	adc	r25, r25
 736:	f1 cf       	rjmp	.-30     	; 0x71a <__fp_splitA+0xc>
 738:	86 95       	lsr	r24
 73a:	71 05       	cpc	r23, r1
 73c:	61 05       	cpc	r22, r1
 73e:	08 94       	sec
 740:	08 95       	ret

00000742 <__fp_zero>:
 742:	e8 94       	clt

00000744 <__fp_szero>:
 744:	bb 27       	eor	r27, r27
 746:	66 27       	eor	r22, r22
 748:	77 27       	eor	r23, r23
 74a:	cb 01       	movw	r24, r22
 74c:	97 f9       	bld	r25, 7
 74e:	08 95       	ret

00000750 <__mulsf3>:
 750:	0e 94 bb 03 	call	0x776	; 0x776 <__mulsf3x>
 754:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_round>
 758:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscA>
 75c:	38 f0       	brcs	.+14     	; 0x76c <__mulsf3+0x1c>
 75e:	0e 94 67 03 	call	0x6ce	; 0x6ce <__fp_pscB>
 762:	20 f0       	brcs	.+8      	; 0x76c <__mulsf3+0x1c>
 764:	95 23       	and	r25, r21
 766:	11 f0       	breq	.+4      	; 0x76c <__mulsf3+0x1c>
 768:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_inf>
 76c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_nan>
 770:	11 24       	eor	r1, r1
 772:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>

00000776 <__mulsf3x>:
 776:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__fp_split3>
 77a:	70 f3       	brcs	.-36     	; 0x758 <__mulsf3+0x8>

0000077c <__mulsf3_pse>:
 77c:	95 9f       	mul	r25, r21
 77e:	c1 f3       	breq	.-16     	; 0x770 <__mulsf3+0x20>
 780:	95 0f       	add	r25, r21
 782:	50 e0       	ldi	r21, 0x00	; 0
 784:	55 1f       	adc	r21, r21
 786:	62 9f       	mul	r22, r18
 788:	f0 01       	movw	r30, r0
 78a:	72 9f       	mul	r23, r18
 78c:	bb 27       	eor	r27, r27
 78e:	f0 0d       	add	r31, r0
 790:	b1 1d       	adc	r27, r1
 792:	63 9f       	mul	r22, r19
 794:	aa 27       	eor	r26, r26
 796:	f0 0d       	add	r31, r0
 798:	b1 1d       	adc	r27, r1
 79a:	aa 1f       	adc	r26, r26
 79c:	64 9f       	mul	r22, r20
 79e:	66 27       	eor	r22, r22
 7a0:	b0 0d       	add	r27, r0
 7a2:	a1 1d       	adc	r26, r1
 7a4:	66 1f       	adc	r22, r22
 7a6:	82 9f       	mul	r24, r18
 7a8:	22 27       	eor	r18, r18
 7aa:	b0 0d       	add	r27, r0
 7ac:	a1 1d       	adc	r26, r1
 7ae:	62 1f       	adc	r22, r18
 7b0:	73 9f       	mul	r23, r19
 7b2:	b0 0d       	add	r27, r0
 7b4:	a1 1d       	adc	r26, r1
 7b6:	62 1f       	adc	r22, r18
 7b8:	83 9f       	mul	r24, r19
 7ba:	a0 0d       	add	r26, r0
 7bc:	61 1d       	adc	r22, r1
 7be:	22 1f       	adc	r18, r18
 7c0:	74 9f       	mul	r23, r20
 7c2:	33 27       	eor	r19, r19
 7c4:	a0 0d       	add	r26, r0
 7c6:	61 1d       	adc	r22, r1
 7c8:	23 1f       	adc	r18, r19
 7ca:	84 9f       	mul	r24, r20
 7cc:	60 0d       	add	r22, r0
 7ce:	21 1d       	adc	r18, r1
 7d0:	82 2f       	mov	r24, r18
 7d2:	76 2f       	mov	r23, r22
 7d4:	6a 2f       	mov	r22, r26
 7d6:	11 24       	eor	r1, r1
 7d8:	9f 57       	subi	r25, 0x7F	; 127
 7da:	50 40       	sbci	r21, 0x00	; 0
 7dc:	9a f0       	brmi	.+38     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7de:	f1 f0       	breq	.+60     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7e0:	88 23       	and	r24, r24
 7e2:	4a f0       	brmi	.+18     	; 0x7f6 <__mulsf3_pse+0x7a>
 7e4:	ee 0f       	add	r30, r30
 7e6:	ff 1f       	adc	r31, r31
 7e8:	bb 1f       	adc	r27, r27
 7ea:	66 1f       	adc	r22, r22
 7ec:	77 1f       	adc	r23, r23
 7ee:	88 1f       	adc	r24, r24
 7f0:	91 50       	subi	r25, 0x01	; 1
 7f2:	50 40       	sbci	r21, 0x00	; 0
 7f4:	a9 f7       	brne	.-22     	; 0x7e0 <__mulsf3_pse+0x64>
 7f6:	9e 3f       	cpi	r25, 0xFE	; 254
 7f8:	51 05       	cpc	r21, r1
 7fa:	80 f0       	brcs	.+32     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7fc:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_inf>
 800:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>
 804:	5f 3f       	cpi	r21, 0xFF	; 255
 806:	e4 f3       	brlt	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
 808:	98 3e       	cpi	r25, 0xE8	; 232
 80a:	d4 f3       	brlt	.-12     	; 0x800 <__DATA_REGION_LENGTH__>
 80c:	86 95       	lsr	r24
 80e:	77 95       	ror	r23
 810:	67 95       	ror	r22
 812:	b7 95       	ror	r27
 814:	f7 95       	ror	r31
 816:	e7 95       	ror	r30
 818:	9f 5f       	subi	r25, 0xFF	; 255
 81a:	c1 f7       	brne	.-16     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 81c:	fe 2b       	or	r31, r30
 81e:	88 0f       	add	r24, r24
 820:	91 1d       	adc	r25, r1
 822:	96 95       	lsr	r25
 824:	87 95       	ror	r24
 826:	97 f9       	bld	r25, 7
 828:	08 95       	ret

0000082a <__umulhisi3>:
 82a:	a2 9f       	mul	r26, r18
 82c:	b0 01       	movw	r22, r0
 82e:	b3 9f       	mul	r27, r19
 830:	c0 01       	movw	r24, r0
 832:	a3 9f       	mul	r26, r19
 834:	70 0d       	add	r23, r0
 836:	81 1d       	adc	r24, r1
 838:	11 24       	eor	r1, r1
 83a:	91 1d       	adc	r25, r1
 83c:	b2 9f       	mul	r27, r18
 83e:	70 0d       	add	r23, r0
 840:	81 1d       	adc	r24, r1
 842:	11 24       	eor	r1, r1
 844:	91 1d       	adc	r25, r1
 846:	08 95       	ret

00000848 <_exit>:
 848:	f8 94       	cli

0000084a <__stop_program>:
 84a:	ff cf       	rjmp	.-2      	; 0x84a <__stop_program>
