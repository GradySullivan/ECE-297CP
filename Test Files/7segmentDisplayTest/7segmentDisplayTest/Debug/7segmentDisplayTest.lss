
7segmentDisplayTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000846  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ee  00000000  00000000  00000a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e1  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000177  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define DIG3 3 //B1, enables DIG3
#define DIG4 4 //B4, enables DIG4

# define BUTTON 1 //PORTD
int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    unsigned char i, ledDigits[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 
  aa:	8a e0       	ldi	r24, 0x0A	; 10
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
		0x07, 0x7F, 0x67};
	unsigned char ledDegrees[] = {0b01110001, 0b00111001};
  bc:	21 e7       	ldi	r18, 0x71	; 113
  be:	99 e3       	ldi	r25, 0x39	; 57
	unsigned char numRepeats = 200, persistence = 1;
	DDRD = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1<<DIG1)|(1<<DIG2)|(1<<DIG3)|(1<<DIG4);
  c4:	8e e1       	ldi	r24, 0x1E	; 30
  c6:	84 b9       	out	0x04, r24	; 4
	PORTC = (1<<BUTTON); // pullup
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	88 b9       	out	0x08, r24	; 8
    while (1) 
    {
			PORTD = ledDigits[1];
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	8b b9       	out	0x0b, r24	; 11
			PORTB = ~(1<<DIG1);
  d0:	8d ef       	ldi	r24, 0xFD	; 253
  d2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	ef e9       	ldi	r30, 0x9F	; 159
  d6:	ff e0       	ldi	r31, 0x0F	; 15
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x42>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x48>
  de:	00 00       	nop
			_delay_ms(persistence);
			PORTD = ledDigits[2];
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	8b b9       	out	0x0b, r24	; 11
			PORTB = ~(1<<DIG2);
  e4:	8b ef       	ldi	r24, 0xFB	; 251
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	ef e9       	ldi	r30, 0x9F	; 159
  ea:	ff e0       	ldi	r31, 0x0F	; 15
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x56>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x5c>
  f2:	00 00       	nop
			_delay_ms(persistence);
			PORTD = ledDigits[3];
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	8b b9       	out	0x0b, r24	; 11
			PORTB = ~(1<<DIG3);
  f8:	87 ef       	ldi	r24, 0xF7	; 247
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	ef e9       	ldi	r30, 0x9F	; 159
  fe:	ff e0       	ldi	r31, 0x0F	; 15
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x6a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x70>
 106:	00 00       	nop
			_delay_ms(persistence);
		
		if (!(PINC & (1<<BUTTON))) // test if switch pressed
 108:	31 99       	sbic	0x06, 1	; 6
 10a:	0a c0       	rjmp	.+20     	; 0x120 <main+0x8a>
		{
			PORTD = ledDegrees[1];
 10c:	9b b9       	out	0x0b, r25	; 11
			PORTB = ~(1<<DIG4);
 10e:	8f ee       	ldi	r24, 0xEF	; 239
 110:	85 b9       	out	0x05, r24	; 5
 112:	ef e9       	ldi	r30, 0x9F	; 159
 114:	ff e0       	ldi	r31, 0x0F	; 15
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x80>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x86>
 11c:	00 00       	nop
 11e:	d6 cf       	rjmp	.-84     	; 0xcc <main+0x36>
			_delay_ms(persistence);
		}
		else
		{
			PORTD = ledDegrees[0];
 120:	2b b9       	out	0x0b, r18	; 11
			PORTB = ~(1<<DIG4);
 122:	8f ee       	ldi	r24, 0xEF	; 239
 124:	85 b9       	out	0x05, r24	; 5
 126:	ef e9       	ldi	r30, 0x9F	; 159
 128:	ff e0       	ldi	r31, 0x0F	; 15
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x94>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x9a>
 130:	00 00       	nop
 132:	cc cf       	rjmp	.-104    	; 0xcc <main+0x36>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
